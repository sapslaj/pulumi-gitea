// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RepositoryActionsVariable extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryActionsVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryActionsVariableState, opts?: pulumi.CustomResourceOptions): RepositoryActionsVariable {
        return new RepositoryActionsVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/repositoryActionsVariable:RepositoryActionsVariable';

    /**
     * Returns true if the given object is an instance of RepositoryActionsVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryActionsVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryActionsVariable.__pulumiType;
    }

    /**
     * Name of the repository.
     */
    declare public readonly repository: pulumi.Output<string>;
    declare public readonly repositoryActionsVariableId: pulumi.Output<string>;
    /**
     * Owner of the repository.
     */
    declare public readonly repositoryOwner: pulumi.Output<string>;
    /**
     * Value of the variable.
     */
    declare public readonly value: pulumi.Output<string>;
    /**
     * Name of the variable.
     */
    declare public readonly variableName: pulumi.Output<string>;

    /**
     * Create a RepositoryActionsVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryActionsVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryActionsVariableArgs | RepositoryActionsVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryActionsVariableState | undefined;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["repositoryActionsVariableId"] = state?.repositoryActionsVariableId;
            resourceInputs["repositoryOwner"] = state?.repositoryOwner;
            resourceInputs["value"] = state?.value;
            resourceInputs["variableName"] = state?.variableName;
        } else {
            const args = argsOrState as RepositoryActionsVariableArgs | undefined;
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if (args?.repositoryOwner === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryOwner'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if (args?.variableName === undefined && !opts.urn) {
                throw new Error("Missing required property 'variableName'");
            }
            resourceInputs["repository"] = args?.repository;
            resourceInputs["repositoryActionsVariableId"] = args?.repositoryActionsVariableId;
            resourceInputs["repositoryOwner"] = args?.repositoryOwner;
            resourceInputs["value"] = args?.value;
            resourceInputs["variableName"] = args?.variableName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryActionsVariable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryActionsVariable resources.
 */
export interface RepositoryActionsVariableState {
    /**
     * Name of the repository.
     */
    repository?: pulumi.Input<string>;
    repositoryActionsVariableId?: pulumi.Input<string>;
    /**
     * Owner of the repository.
     */
    repositoryOwner?: pulumi.Input<string>;
    /**
     * Value of the variable.
     */
    value?: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    variableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryActionsVariable resource.
 */
export interface RepositoryActionsVariableArgs {
    /**
     * Name of the repository.
     */
    repository: pulumi.Input<string>;
    repositoryActionsVariableId?: pulumi.Input<string>;
    /**
     * Owner of the repository.
     */
    repositoryOwner: pulumi.Input<string>;
    /**
     * Value of the variable.
     */
    value: pulumi.Input<string>;
    /**
     * Name of the variable.
     */
    variableName: pulumi.Input<string>;
}
