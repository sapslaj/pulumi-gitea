// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Org extends pulumi.CustomResource {
    /**
     * Get an existing Org resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgState, opts?: pulumi.CustomResourceOptions): Org {
        return new Org(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/org:Org';

    /**
     * Returns true if the given object is an instance of Org.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Org {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Org.__pulumiType;
    }

    declare public /*out*/ readonly avatarUrl: pulumi.Output<string>;
    /**
     * A description of this organisation.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The display name of the organisation. Defaults to the value of `name`.
     */
    declare public readonly fullName: pulumi.Output<string | undefined>;
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the organisation without spaces.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly orgId: pulumi.Output<string>;
    declare public readonly repoAdminChangeTeamAccess: pulumi.Output<boolean | undefined>;
    /**
     * List of all Repositories that are part of this organisation
     */
    declare public /*out*/ readonly repos: pulumi.Output<string[]>;
    /**
     * Flag is this organisation should be publicly visible or not.
     */
    declare public readonly visibility: pulumi.Output<string | undefined>;
    /**
     * A link to a website with more information about this organisation.
     */
    declare public readonly website: pulumi.Output<string | undefined>;

    /**
     * Create a Org resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgArgs | OrgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgState | undefined;
            resourceInputs["avatarUrl"] = state?.avatarUrl;
            resourceInputs["description"] = state?.description;
            resourceInputs["fullName"] = state?.fullName;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["repoAdminChangeTeamAccess"] = state?.repoAdminChangeTeamAccess;
            resourceInputs["repos"] = state?.repos;
            resourceInputs["visibility"] = state?.visibility;
            resourceInputs["website"] = state?.website;
        } else {
            const args = argsOrState as OrgArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["fullName"] = args?.fullName;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["repoAdminChangeTeamAccess"] = args?.repoAdminChangeTeamAccess;
            resourceInputs["visibility"] = args?.visibility;
            resourceInputs["website"] = args?.website;
            resourceInputs["avatarUrl"] = undefined /*out*/;
            resourceInputs["repos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Org.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Org resources.
 */
export interface OrgState {
    avatarUrl?: pulumi.Input<string>;
    /**
     * A description of this organisation.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the organisation. Defaults to the value of `name`.
     */
    fullName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The name of the organisation without spaces.
     */
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    repoAdminChangeTeamAccess?: pulumi.Input<boolean>;
    /**
     * List of all Repositories that are part of this organisation
     */
    repos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag is this organisation should be publicly visible or not.
     */
    visibility?: pulumi.Input<string>;
    /**
     * A link to a website with more information about this organisation.
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Org resource.
 */
export interface OrgArgs {
    /**
     * A description of this organisation.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the organisation. Defaults to the value of `name`.
     */
    fullName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The name of the organisation without spaces.
     */
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    repoAdminChangeTeamAccess?: pulumi.Input<boolean>;
    /**
     * Flag is this organisation should be publicly visible or not.
     */
    visibility?: pulumi.Input<string>;
    /**
     * A link to a website with more information about this organisation.
     */
    website?: pulumi.Input<string>;
}
