// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ForkArgs, ForkState } from "./fork";
export type Fork = import("./fork").Fork;
export const Fork: typeof import("./fork").Fork = null as any;
utilities.lazyLoad(exports, ["Fork"], () => require("./fork"));

export { GetOrgArgs, GetOrgResult, GetOrgOutputArgs } from "./getOrg";
export const getOrg: typeof import("./getOrg").getOrg = null as any;
export const getOrgOutput: typeof import("./getOrg").getOrgOutput = null as any;
utilities.lazyLoad(exports, ["getOrg","getOrgOutput"], () => require("./getOrg"));

export { GetRepoArgs, GetRepoResult, GetRepoOutputArgs } from "./getRepo";
export const getRepo: typeof import("./getRepo").getRepo = null as any;
export const getRepoOutput: typeof import("./getRepo").getRepoOutput = null as any;
utilities.lazyLoad(exports, ["getRepo","getRepoOutput"], () => require("./getRepo"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GitHookArgs, GitHookState } from "./gitHook";
export type GitHook = import("./gitHook").GitHook;
export const GitHook: typeof import("./gitHook").GitHook = null as any;
utilities.lazyLoad(exports, ["GitHook"], () => require("./gitHook"));

export { GpgKeyArgs, GpgKeyState } from "./gpgKey";
export type GpgKey = import("./gpgKey").GpgKey;
export const GpgKey: typeof import("./gpgKey").GpgKey = null as any;
utilities.lazyLoad(exports, ["GpgKey"], () => require("./gpgKey"));

export { Oauth2AppArgs, Oauth2AppState } from "./oauth2App";
export type Oauth2App = import("./oauth2App").Oauth2App;
export const Oauth2App: typeof import("./oauth2App").Oauth2App = null as any;
utilities.lazyLoad(exports, ["Oauth2App"], () => require("./oauth2App"));

export { OrgArgs, OrgState } from "./org";
export type Org = import("./org").Org;
export const Org: typeof import("./org").Org = null as any;
utilities.lazyLoad(exports, ["Org"], () => require("./org"));

export * from "./provider";
import { Provider } from "./provider";

export { PublicKeyArgs, PublicKeyState } from "./publicKey";
export type PublicKey = import("./publicKey").PublicKey;
export const PublicKey: typeof import("./publicKey").PublicKey = null as any;
utilities.lazyLoad(exports, ["PublicKey"], () => require("./publicKey"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryActionsSecretArgs, RepositoryActionsSecretState } from "./repositoryActionsSecret";
export type RepositoryActionsSecret = import("./repositoryActionsSecret").RepositoryActionsSecret;
export const RepositoryActionsSecret: typeof import("./repositoryActionsSecret").RepositoryActionsSecret = null as any;
utilities.lazyLoad(exports, ["RepositoryActionsSecret"], () => require("./repositoryActionsSecret"));

export { RepositoryActionsVariableArgs, RepositoryActionsVariableState } from "./repositoryActionsVariable";
export type RepositoryActionsVariable = import("./repositoryActionsVariable").RepositoryActionsVariable;
export const RepositoryActionsVariable: typeof import("./repositoryActionsVariable").RepositoryActionsVariable = null as any;
utilities.lazyLoad(exports, ["RepositoryActionsVariable"], () => require("./repositoryActionsVariable"));

export { RepositoryBranchProtectionArgs, RepositoryBranchProtectionState } from "./repositoryBranchProtection";
export type RepositoryBranchProtection = import("./repositoryBranchProtection").RepositoryBranchProtection;
export const RepositoryBranchProtection: typeof import("./repositoryBranchProtection").RepositoryBranchProtection = null as any;
utilities.lazyLoad(exports, ["RepositoryBranchProtection"], () => require("./repositoryBranchProtection"));

export { RepositoryKeyArgs, RepositoryKeyState } from "./repositoryKey";
export type RepositoryKey = import("./repositoryKey").RepositoryKey;
export const RepositoryKey: typeof import("./repositoryKey").RepositoryKey = null as any;
utilities.lazyLoad(exports, ["RepositoryKey"], () => require("./repositoryKey"));

export { RepositoryWebhookArgs, RepositoryWebhookState } from "./repositoryWebhook";
export type RepositoryWebhook = import("./repositoryWebhook").RepositoryWebhook;
export const RepositoryWebhook: typeof import("./repositoryWebhook").RepositoryWebhook = null as any;
utilities.lazyLoad(exports, ["RepositoryWebhook"], () => require("./repositoryWebhook"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembersArgs, TeamMembersState } from "./teamMembers";
export type TeamMembers = import("./teamMembers").TeamMembers;
export const TeamMembers: typeof import("./teamMembers").TeamMembers = null as any;
utilities.lazyLoad(exports, ["TeamMembers"], () => require("./teamMembers"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gitea:index/fork:Fork":
                return new Fork(name, <any>undefined, { urn })
            case "gitea:index/gitHook:GitHook":
                return new GitHook(name, <any>undefined, { urn })
            case "gitea:index/gpgKey:GpgKey":
                return new GpgKey(name, <any>undefined, { urn })
            case "gitea:index/oauth2App:Oauth2App":
                return new Oauth2App(name, <any>undefined, { urn })
            case "gitea:index/org:Org":
                return new Org(name, <any>undefined, { urn })
            case "gitea:index/publicKey:PublicKey":
                return new PublicKey(name, <any>undefined, { urn })
            case "gitea:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "gitea:index/repositoryActionsSecret:RepositoryActionsSecret":
                return new RepositoryActionsSecret(name, <any>undefined, { urn })
            case "gitea:index/repositoryActionsVariable:RepositoryActionsVariable":
                return new RepositoryActionsVariable(name, <any>undefined, { urn })
            case "gitea:index/repositoryBranchProtection:RepositoryBranchProtection":
                return new RepositoryBranchProtection(name, <any>undefined, { urn })
            case "gitea:index/repositoryKey:RepositoryKey":
                return new RepositoryKey(name, <any>undefined, { urn })
            case "gitea:index/repositoryWebhook:RepositoryWebhook":
                return new RepositoryWebhook(name, <any>undefined, { urn })
            case "gitea:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "gitea:index/teamMembers:TeamMembers":
                return new TeamMembers(name, <any>undefined, { urn })
            case "gitea:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            case "gitea:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "gitea:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gitea", "index/fork", _module)
pulumi.runtime.registerResourceModule("gitea", "index/gitHook", _module)
pulumi.runtime.registerResourceModule("gitea", "index/gpgKey", _module)
pulumi.runtime.registerResourceModule("gitea", "index/oauth2App", _module)
pulumi.runtime.registerResourceModule("gitea", "index/org", _module)
pulumi.runtime.registerResourceModule("gitea", "index/publicKey", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repository", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repositoryActionsSecret", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repositoryActionsVariable", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repositoryBranchProtection", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repositoryKey", _module)
pulumi.runtime.registerResourceModule("gitea", "index/repositoryWebhook", _module)
pulumi.runtime.registerResourceModule("gitea", "index/team", _module)
pulumi.runtime.registerResourceModule("gitea", "index/teamMembers", _module)
pulumi.runtime.registerResourceModule("gitea", "index/teamMembership", _module)
pulumi.runtime.registerResourceModule("gitea", "index/token", _module)
pulumi.runtime.registerResourceModule("gitea", "index/user", _module)
pulumi.runtime.registerResourcePackage("gitea", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gitea") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
