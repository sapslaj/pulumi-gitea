// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GitHook extends pulumi.CustomResource {
    /**
     * Get an existing GitHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitHookState, opts?: pulumi.CustomResourceOptions): GitHook {
        return new GitHook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/gitHook:GitHook';

    /**
     * Returns true if the given object is an instance of GitHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitHook.__pulumiType;
    }

    /**
     * Content of the git hook
     */
    declare public readonly content: pulumi.Output<string>;
    declare public readonly gitHookId: pulumi.Output<string>;
    /**
     * Name of the git hook to configure
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The repository that this hook belongs too.
     */
    declare public readonly repo: pulumi.Output<string>;
    /**
     * The user (or organisation) owning the repo this hook belongs too
     */
    declare public readonly user: pulumi.Output<string>;

    /**
     * Create a GitHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitHookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitHookArgs | GitHookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitHookState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["gitHookId"] = state?.gitHookId;
            resourceInputs["name"] = state?.name;
            resourceInputs["repo"] = state?.repo;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as GitHookArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.repo === undefined && !opts.urn) {
                throw new Error("Missing required property 'repo'");
            }
            if (args?.user === undefined && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["content"] = args?.content;
            resourceInputs["gitHookId"] = args?.gitHookId;
            resourceInputs["name"] = args?.name;
            resourceInputs["repo"] = args?.repo;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitHook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GitHook resources.
 */
export interface GitHookState {
    /**
     * Content of the git hook
     */
    content?: pulumi.Input<string>;
    gitHookId?: pulumi.Input<string>;
    /**
     * Name of the git hook to configure
     */
    name?: pulumi.Input<string>;
    /**
     * The repository that this hook belongs too.
     */
    repo?: pulumi.Input<string>;
    /**
     * The user (or organisation) owning the repo this hook belongs too
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitHook resource.
 */
export interface GitHookArgs {
    /**
     * Content of the git hook
     */
    content: pulumi.Input<string>;
    gitHookId?: pulumi.Input<string>;
    /**
     * Name of the git hook to configure
     */
    name?: pulumi.Input<string>;
    /**
     * The repository that this hook belongs too.
     */
    repo: pulumi.Input<string>;
    /**
     * The user (or organisation) owning the repo this hook belongs too
     */
    user: pulumi.Input<string>;
}
