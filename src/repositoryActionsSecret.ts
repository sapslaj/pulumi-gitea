// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RepositoryActionsSecret extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryActionsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryActionsSecretState, opts?: pulumi.CustomResourceOptions): RepositoryActionsSecret {
        return new RepositoryActionsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/repositoryActionsSecret:RepositoryActionsSecret';

    /**
     * Returns true if the given object is an instance of RepositoryActionsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryActionsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryActionsSecret.__pulumiType;
    }

    /**
     * Date of 'actions_secret' creation.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Name of the repository.
     */
    declare public readonly repository: pulumi.Output<string>;
    declare public readonly repositoryActionsSecretId: pulumi.Output<string>;
    /**
     * Owner of the repository.
     */
    declare public readonly repositoryOwner: pulumi.Output<string>;
    /**
     * Name of the secret.
     */
    declare public readonly secretName: pulumi.Output<string>;
    /**
     * Value of the secret.
     */
    declare public readonly secretValue: pulumi.Output<string>;

    /**
     * Create a RepositoryActionsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryActionsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryActionsSecretArgs | RepositoryActionsSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryActionsSecretState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["repositoryActionsSecretId"] = state?.repositoryActionsSecretId;
            resourceInputs["repositoryOwner"] = state?.repositoryOwner;
            resourceInputs["secretName"] = state?.secretName;
            resourceInputs["secretValue"] = state?.secretValue;
        } else {
            const args = argsOrState as RepositoryActionsSecretArgs | undefined;
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if (args?.repositoryOwner === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryOwner'");
            }
            if (args?.secretName === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if (args?.secretValue === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretValue'");
            }
            resourceInputs["repository"] = args?.repository;
            resourceInputs["repositoryActionsSecretId"] = args?.repositoryActionsSecretId;
            resourceInputs["repositoryOwner"] = args?.repositoryOwner;
            resourceInputs["secretName"] = args?.secretName;
            resourceInputs["secretValue"] = args?.secretValue ? pulumi.secret(args.secretValue) : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RepositoryActionsSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryActionsSecret resources.
 */
export interface RepositoryActionsSecretState {
    /**
     * Date of 'actions_secret' creation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repository?: pulumi.Input<string>;
    repositoryActionsSecretId?: pulumi.Input<string>;
    /**
     * Owner of the repository.
     */
    repositoryOwner?: pulumi.Input<string>;
    /**
     * Name of the secret.
     */
    secretName?: pulumi.Input<string>;
    /**
     * Value of the secret.
     */
    secretValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryActionsSecret resource.
 */
export interface RepositoryActionsSecretArgs {
    /**
     * Name of the repository.
     */
    repository: pulumi.Input<string>;
    repositoryActionsSecretId?: pulumi.Input<string>;
    /**
     * Owner of the repository.
     */
    repositoryOwner: pulumi.Input<string>;
    /**
     * Name of the secret.
     */
    secretName: pulumi.Input<string>;
    /**
     * Value of the secret.
     */
    secretValue: pulumi.Input<string>;
}
