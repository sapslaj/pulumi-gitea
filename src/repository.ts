// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    declare public readonly allowManualMerge: pulumi.Output<boolean | undefined>;
    declare public readonly allowMergeCommits: pulumi.Output<boolean | undefined>;
    declare public readonly allowRebase: pulumi.Output<boolean | undefined>;
    declare public readonly allowRebaseExplicit: pulumi.Output<boolean | undefined>;
    declare public readonly allowSquashMerge: pulumi.Output<boolean | undefined>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    declare public readonly archiveOnDestroy: pulumi.Output<boolean | undefined>;
    declare public readonly archived: pulumi.Output<boolean | undefined>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    declare public readonly autoInit: pulumi.Output<boolean | undefined>;
    declare public readonly autodetectManualMerge: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly cloneUrl: pulumi.Output<string>;
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    declare public readonly defaultBranch: pulumi.Output<string | undefined>;
    /**
     * The description of the repository.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    declare public readonly gitignores: pulumi.Output<string | undefined>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    declare public readonly hasIssues: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    declare public readonly hasProjects: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    declare public readonly hasPullRequests: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    declare public readonly hasWiki: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly htmlUrl: pulumi.Output<string>;
    declare public readonly ignoreWhitespaceConflicts: pulumi.Output<boolean | undefined>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    declare public readonly issueLabels: pulumi.Output<string | undefined>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    declare public readonly license: pulumi.Output<string | undefined>;
    declare public readonly migrationCloneAddress: pulumi.Output<string | undefined>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    declare public readonly migrationCloneAddresse: pulumi.Output<string | undefined>;
    declare public readonly migrationIssueLabels: pulumi.Output<boolean | undefined>;
    declare public readonly migrationLfs: pulumi.Output<boolean | undefined>;
    declare public readonly migrationLfsEndpoint: pulumi.Output<string | undefined>;
    declare public readonly migrationMilestones: pulumi.Output<boolean | undefined>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    declare public readonly migrationMirrorInterval: pulumi.Output<string | undefined>;
    declare public readonly migrationReleases: pulumi.Output<boolean | undefined>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    declare public readonly migrationService: pulumi.Output<string | undefined>;
    declare public readonly migrationServiceAuthPassword: pulumi.Output<string | undefined>;
    declare public readonly migrationServiceAuthToken: pulumi.Output<string | undefined>;
    declare public readonly migrationServiceAuthUsername: pulumi.Output<string | undefined>;
    declare public readonly mirror: pulumi.Output<boolean | undefined>;
    /**
     * The Name of the repository
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly permissionAdmin: pulumi.Output<boolean>;
    declare public /*out*/ readonly permissionPull: pulumi.Output<boolean>;
    declare public /*out*/ readonly permissionPush: pulumi.Output<boolean>;
    /**
     * Flag if the repository should be private or not.
     */
    declare public readonly private: pulumi.Output<boolean | undefined>;
    declare public readonly readme: pulumi.Output<string | undefined>;
    declare public readonly repoTemplate: pulumi.Output<boolean | undefined>;
    declare public readonly repositoryId: pulumi.Output<string>;
    declare public /*out*/ readonly sshUrl: pulumi.Output<string>;
    declare public /*out*/ readonly updated: pulumi.Output<string>;
    /**
     * The Owner of the repository
     */
    declare public readonly username: pulumi.Output<string>;
    /**
     * A link to a website with more information.
     */
    declare public readonly website: pulumi.Output<string | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["allowManualMerge"] = state?.allowManualMerge;
            resourceInputs["allowMergeCommits"] = state?.allowMergeCommits;
            resourceInputs["allowRebase"] = state?.allowRebase;
            resourceInputs["allowRebaseExplicit"] = state?.allowRebaseExplicit;
            resourceInputs["allowSquashMerge"] = state?.allowSquashMerge;
            resourceInputs["archiveOnDestroy"] = state?.archiveOnDestroy;
            resourceInputs["archived"] = state?.archived;
            resourceInputs["autoInit"] = state?.autoInit;
            resourceInputs["autodetectManualMerge"] = state?.autodetectManualMerge;
            resourceInputs["cloneUrl"] = state?.cloneUrl;
            resourceInputs["created"] = state?.created;
            resourceInputs["defaultBranch"] = state?.defaultBranch;
            resourceInputs["description"] = state?.description;
            resourceInputs["gitignores"] = state?.gitignores;
            resourceInputs["hasIssues"] = state?.hasIssues;
            resourceInputs["hasProjects"] = state?.hasProjects;
            resourceInputs["hasPullRequests"] = state?.hasPullRequests;
            resourceInputs["hasWiki"] = state?.hasWiki;
            resourceInputs["htmlUrl"] = state?.htmlUrl;
            resourceInputs["ignoreWhitespaceConflicts"] = state?.ignoreWhitespaceConflicts;
            resourceInputs["issueLabels"] = state?.issueLabels;
            resourceInputs["license"] = state?.license;
            resourceInputs["migrationCloneAddress"] = state?.migrationCloneAddress;
            resourceInputs["migrationCloneAddresse"] = state?.migrationCloneAddresse;
            resourceInputs["migrationIssueLabels"] = state?.migrationIssueLabels;
            resourceInputs["migrationLfs"] = state?.migrationLfs;
            resourceInputs["migrationLfsEndpoint"] = state?.migrationLfsEndpoint;
            resourceInputs["migrationMilestones"] = state?.migrationMilestones;
            resourceInputs["migrationMirrorInterval"] = state?.migrationMirrorInterval;
            resourceInputs["migrationReleases"] = state?.migrationReleases;
            resourceInputs["migrationService"] = state?.migrationService;
            resourceInputs["migrationServiceAuthPassword"] = state?.migrationServiceAuthPassword;
            resourceInputs["migrationServiceAuthToken"] = state?.migrationServiceAuthToken;
            resourceInputs["migrationServiceAuthUsername"] = state?.migrationServiceAuthUsername;
            resourceInputs["mirror"] = state?.mirror;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissionAdmin"] = state?.permissionAdmin;
            resourceInputs["permissionPull"] = state?.permissionPull;
            resourceInputs["permissionPush"] = state?.permissionPush;
            resourceInputs["private"] = state?.private;
            resourceInputs["readme"] = state?.readme;
            resourceInputs["repoTemplate"] = state?.repoTemplate;
            resourceInputs["repositoryId"] = state?.repositoryId;
            resourceInputs["sshUrl"] = state?.sshUrl;
            resourceInputs["updated"] = state?.updated;
            resourceInputs["username"] = state?.username;
            resourceInputs["website"] = state?.website;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowManualMerge"] = args?.allowManualMerge;
            resourceInputs["allowMergeCommits"] = args?.allowMergeCommits;
            resourceInputs["allowRebase"] = args?.allowRebase;
            resourceInputs["allowRebaseExplicit"] = args?.allowRebaseExplicit;
            resourceInputs["allowSquashMerge"] = args?.allowSquashMerge;
            resourceInputs["archiveOnDestroy"] = args?.archiveOnDestroy;
            resourceInputs["archived"] = args?.archived;
            resourceInputs["autoInit"] = args?.autoInit;
            resourceInputs["autodetectManualMerge"] = args?.autodetectManualMerge;
            resourceInputs["defaultBranch"] = args?.defaultBranch;
            resourceInputs["description"] = args?.description;
            resourceInputs["gitignores"] = args?.gitignores;
            resourceInputs["hasIssues"] = args?.hasIssues;
            resourceInputs["hasProjects"] = args?.hasProjects;
            resourceInputs["hasPullRequests"] = args?.hasPullRequests;
            resourceInputs["hasWiki"] = args?.hasWiki;
            resourceInputs["ignoreWhitespaceConflicts"] = args?.ignoreWhitespaceConflicts;
            resourceInputs["issueLabels"] = args?.issueLabels;
            resourceInputs["license"] = args?.license;
            resourceInputs["migrationCloneAddress"] = args?.migrationCloneAddress;
            resourceInputs["migrationCloneAddresse"] = args?.migrationCloneAddresse;
            resourceInputs["migrationIssueLabels"] = args?.migrationIssueLabels;
            resourceInputs["migrationLfs"] = args?.migrationLfs;
            resourceInputs["migrationLfsEndpoint"] = args?.migrationLfsEndpoint;
            resourceInputs["migrationMilestones"] = args?.migrationMilestones;
            resourceInputs["migrationMirrorInterval"] = args?.migrationMirrorInterval;
            resourceInputs["migrationReleases"] = args?.migrationReleases;
            resourceInputs["migrationService"] = args?.migrationService;
            resourceInputs["migrationServiceAuthPassword"] = args?.migrationServiceAuthPassword ? pulumi.secret(args.migrationServiceAuthPassword) : undefined;
            resourceInputs["migrationServiceAuthToken"] = args?.migrationServiceAuthToken ? pulumi.secret(args.migrationServiceAuthToken) : undefined;
            resourceInputs["migrationServiceAuthUsername"] = args?.migrationServiceAuthUsername;
            resourceInputs["mirror"] = args?.mirror;
            resourceInputs["name"] = args?.name;
            resourceInputs["private"] = args?.private;
            resourceInputs["readme"] = args?.readme;
            resourceInputs["repoTemplate"] = args?.repoTemplate;
            resourceInputs["repositoryId"] = args?.repositoryId;
            resourceInputs["username"] = args?.username;
            resourceInputs["website"] = args?.website;
            resourceInputs["cloneUrl"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["permissionAdmin"] = undefined /*out*/;
            resourceInputs["permissionPull"] = undefined /*out*/;
            resourceInputs["permissionPush"] = undefined /*out*/;
            resourceInputs["sshUrl"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["migrationServiceAuthPassword", "migrationServiceAuthToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Repository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    allowManualMerge?: pulumi.Input<boolean>;
    allowMergeCommits?: pulumi.Input<boolean>;
    allowRebase?: pulumi.Input<boolean>;
    allowRebaseExplicit?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    autoInit?: pulumi.Input<boolean>;
    autodetectManualMerge?: pulumi.Input<boolean>;
    cloneUrl?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    gitignores?: pulumi.Input<string>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    hasProjects?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    hasPullRequests?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    htmlUrl?: pulumi.Input<string>;
    ignoreWhitespaceConflicts?: pulumi.Input<boolean>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    issueLabels?: pulumi.Input<string>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    license?: pulumi.Input<string>;
    migrationCloneAddress?: pulumi.Input<string>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    migrationCloneAddresse?: pulumi.Input<string>;
    migrationIssueLabels?: pulumi.Input<boolean>;
    migrationLfs?: pulumi.Input<boolean>;
    migrationLfsEndpoint?: pulumi.Input<string>;
    migrationMilestones?: pulumi.Input<boolean>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    migrationMirrorInterval?: pulumi.Input<string>;
    migrationReleases?: pulumi.Input<boolean>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    migrationService?: pulumi.Input<string>;
    migrationServiceAuthPassword?: pulumi.Input<string>;
    migrationServiceAuthToken?: pulumi.Input<string>;
    migrationServiceAuthUsername?: pulumi.Input<string>;
    mirror?: pulumi.Input<boolean>;
    /**
     * The Name of the repository
     */
    name?: pulumi.Input<string>;
    permissionAdmin?: pulumi.Input<boolean>;
    permissionPull?: pulumi.Input<boolean>;
    permissionPush?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be private or not.
     */
    private?: pulumi.Input<boolean>;
    readme?: pulumi.Input<string>;
    repoTemplate?: pulumi.Input<boolean>;
    repositoryId?: pulumi.Input<string>;
    sshUrl?: pulumi.Input<string>;
    updated?: pulumi.Input<string>;
    /**
     * The Owner of the repository
     */
    username?: pulumi.Input<string>;
    /**
     * A link to a website with more information.
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    allowManualMerge?: pulumi.Input<boolean>;
    allowMergeCommits?: pulumi.Input<boolean>;
    allowRebase?: pulumi.Input<boolean>;
    allowRebaseExplicit?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    autoInit?: pulumi.Input<boolean>;
    autodetectManualMerge?: pulumi.Input<boolean>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    gitignores?: pulumi.Input<string>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    hasProjects?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    hasPullRequests?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    ignoreWhitespaceConflicts?: pulumi.Input<boolean>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    issueLabels?: pulumi.Input<string>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    license?: pulumi.Input<string>;
    migrationCloneAddress?: pulumi.Input<string>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    migrationCloneAddresse?: pulumi.Input<string>;
    migrationIssueLabels?: pulumi.Input<boolean>;
    migrationLfs?: pulumi.Input<boolean>;
    migrationLfsEndpoint?: pulumi.Input<string>;
    migrationMilestones?: pulumi.Input<boolean>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    migrationMirrorInterval?: pulumi.Input<string>;
    migrationReleases?: pulumi.Input<boolean>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    migrationService?: pulumi.Input<string>;
    migrationServiceAuthPassword?: pulumi.Input<string>;
    migrationServiceAuthToken?: pulumi.Input<string>;
    migrationServiceAuthUsername?: pulumi.Input<string>;
    mirror?: pulumi.Input<boolean>;
    /**
     * The Name of the repository
     */
    name?: pulumi.Input<string>;
    /**
     * Flag if the repository should be private or not.
     */
    private?: pulumi.Input<boolean>;
    readme?: pulumi.Input<string>;
    repoTemplate?: pulumi.Input<boolean>;
    repositoryId?: pulumi.Input<string>;
    /**
     * The Owner of the repository
     */
    username: pulumi.Input<string>;
    /**
     * A link to a website with more information.
     */
    website?: pulumi.Input<string>;
}
